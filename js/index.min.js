function detectDivice(){var a={win:!1,mac:!1,xll:!1,ipad:!1},b=navigator.platform;a.win=0==b.indexOf("Win"),a.mac=0==b.indexOf("Mac"),a.x11="X11"==b||0==b.indexOf("Linux"),a.ipad=null!=navigator.userAgent.match(/iPad/i)?!0:!1,(a.win||a.mac||a.xll||a.ipad)&&(pointSize=1,WIDTH=1024,particleCount=WIDTH*WIDTH)}function init(){var a,b,c,d,e;container=document.createElement("div"),document.body.appendChild(container),camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3),camera.position.z=250,scene=new THREE.Scene,scene.fog=new THREE.Fog(2764338,2,800),scene.add(new THREE.HemisphereLight(4469555,1118498)),addShadowedLight(1,1,1,16777215,1),a=new THREE.Mesh(new THREE.PlaneBufferGeometry(1e3,1e3),new THREE.MeshPhongMaterial({color:3356733,specular:1052688})),a.rotation.x=-Math.PI/2,a.position.y=-50,a.receiveShadow=!0,forceSphere=new THREE.Mesh(new THREE.SphereGeometry(forceRadius,36,36),new THREE.MeshPhongMaterial({color:15263976,specular:1052688,opacity:.2,transparent:!0})),scene.add(forceSphere),b=new THREE.LoadingManager,c=function(a){if(a.lengthComputable){var b=Math.round(100*(a.loaded/a.total),2);console.log(b+"% downloaded"),loadingInfo.textContent="Download Model "+b+"%"}},d=function(){},e=new THREE.OBJLoader(b),e.load("http://cdn.sinacloud.net/webpageworks/WebGL-Particles/fo1.obj",function(a){a.traverse(function(a){var b,c,d,e,f,g,h,i;if(a instanceof THREE.Mesh){for(a.castShadow=!0,a.receiveShadow=!0,loadingInfo.textContent="Initing Particles 0%",b=THREE.GeometryUtils.randomPointsInBufferGeometry(a.geometry,particleCount),loadingInfo.textContent="Initing Particles 30%",ParticlesInitPosition=b[0],ParticlesInitNormal=b[1],particleUniforms={texturePosition:{value:null},textureVelocity:{value:null},myPointSize:{value:pointSize}},c=new THREE.ShaderMaterial({uniforms:particleUniforms,vertexShader:vertexShaderText,fragmentShader:fragmentShaderText}),d=new Float32Array(3*ParticlesInitPosition.length),e=new Float32Array(3*ParticlesInitNormal.length),f=0;f<ParticlesInitPosition.length;f++)d[3*f]=ParticlesInitPosition[f].x,d[3*f+1]=ParticlesInitPosition[f].y,d[3*f+2]=ParticlesInitPosition[f].z,e[3*f]=ParticlesInitNormal[f].x,e[3*f+1]=ParticlesInitNormal[f].y,e[3*f+2]=ParticlesInitNormal[f].z;for(g=new THREE.BufferGeometry,g.addAttribute("position",new THREE.BufferAttribute(d,3)),g.addAttribute("normal",new THREE.BufferAttribute(e,3)),h=new THREE.BufferAttribute(new Float32Array(2*particleCount),2),g.addAttribute("reference",h),i=0;particleCount>i;i++)h.array[2*i]=i%WIDTH/WIDTH,h.array[2*i+1]=Math.floor(i/WIDTH)/WIDTH;system=new THREE.Points(g,c),system.castShadow=!0,system.receiveShadow=!0,system.position.y=-110,scene.add(system),loadingInfo.textContent="Initing Particles 40%",initComputeRenderer()}}),hasLoadObj=!0,a.position.y=-110},c,d),raycaster=new THREE.Raycaster,renderer=new THREE.WebGLRenderer,renderer.setClearColor(scene.fog.color),renderer.setPixelRatio(window.devicePixelRatio),renderer.setSize(window.innerWidth,window.innerHeight),container.appendChild(renderer.domElement),renderer.gammaInput=!0,renderer.gammaOutput=!0,renderer.shadowMap.enabled=!0,renderer.shadowMap.renderReverseSided=!1,stats=new Stats,container.appendChild(stats.dom),document.addEventListener("mousemove",onDocumentMouseMove,!1),document.addEventListener("mousedown",onDocumentMouseDown,!1),document.addEventListener("wheel",onDocumentMouseWheel,!1),document.addEventListener("touchmove",touchMove,!1),window.addEventListener("resize",onWindowResize,!1),mouse.x=-1,mouse.y=-1,initGUI()}function initGUI(){var a=new dat.GUI,b={reset:function(){positionUniforms.isReset.value=!0,velocityUniforms.isReset.value=!0,setTimeout(function(){positionUniforms.isReset.value=!1,velocityUniforms.isReset.value=!1},1e3)},particleCount:.5},c=function(){};c(),a.add(b,"reset")}function touchMove(a){a.preventDefault();var b=a.changedTouches;mouse.x=2*(b[0].pageX/window.innerWidth)-1,mouse.y=2*-(b[0].pageY/window.innerHeight)+1}function onWindowResize(){windowHalfX=window.innerWidth/2,windowHalfY=window.innerHeight/2,camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)}function onDocumentMouseDown(a){a.preventDefault(),onPointerDownPointerX=a.clientX,onPointerDownPointerY=a.clientY,onPointerDownLon=lon,onPointerDownLat=lat,isUserInteracting=!0,document.addEventListener("mouseup",onDocumentMouseUp,!1)}function onDocumentMouseMove(a){isUserInteracting&&(lon=.1*(a.clientX-onPointerDownPointerX)+onPointerDownLon,lat=.1*(a.clientY-onPointerDownPointerY)+onPointerDownLat),mouse.x=2*(a.clientX/window.innerWidth)-1,mouse.y=2*-(a.clientY/window.innerHeight)+1}function onDocumentMouseUp(){isUserInteracting=!1,document.removeEventListener("mouseup",onDocumentMouseUp,!1)}function onDocumentMouseWheel(a){fov+=.05*a.deltaY,camera.projectionMatrix.makePerspective(fov,window.innerWidth/window.innerHeight,1,1100)}function animate(){requestAnimationFrame(animate),hasLoadObj&&render(),stats.update()}function render(){var a,b,c=performance.now(),d=(c-last)/1e3;d>1&&(d=1),last=c,lon+=.5,lat=Math.max(-85,Math.min(85,lat)),phi=THREE.Math.degToRad(90-lat),theta=THREE.Math.degToRad(lon),camera.position.x=500*Math.sin(phi)*Math.cos(theta),camera.position.y=500*Math.cos(phi)+100,camera.position.z=500*Math.sin(phi)*Math.sin(theta),camera.lookAt(new THREE.Vector3(0,36,0)),positionUniforms.delta.value=d,velocityUniforms.delta.value=d,raycaster.setFromCamera(mouse,camera),a=raycaster.ray,b=a.at(500),velocityUniforms.forcePos.value.set(b.x,b.y,b.z),forceSphere.position.x=b.x,forceSphere.position.y=b.y,forceSphere.position.z=b.z,gpuCompute.compute(),particleUniforms.texturePosition.value=gpuCompute.getCurrentRenderTarget(positionVariable).texture,particleUniforms.textureVelocity.value=gpuCompute.getCurrentRenderTarget(velocityVariable).texture,renderer.render(scene,camera)}function addShadowedLight(a,b,c,d,e){var f,g=new THREE.DirectionalLight(d,e);g.position.set(a,b,c),scene.add(g),g.castShadow=!0,f=100,g.shadow.camera.left=-f,g.shadow.camera.right=f,g.shadow.camera.top=f,g.shadow.camera.bottom=-f,g.shadow.camera.near=1,g.shadow.camera.far=300,g.shadow.mapSize.width=WIDTH,g.shadow.mapSize.height=WIDTH,g.shadow.bias=-.005}function initComputeRenderer(){var a,b,c;gpuCompute=new GPUComputationRenderer(WIDTH,WIDTH,renderer),a=gpuCompute.createTexture(),b=gpuCompute.createTexture(),fillPositionTexture(a),loadingInfo.textContent="Initing Particles 60%",fillVelocityTexture(b),loadingInfo.textContent="Initing Particles 80%",velocityVariable=gpuCompute.addVariable("textureVelocity",velFShaderText,b),positionVariable=gpuCompute.addVariable("texturePosition",posFShaderText,a),gpuCompute.setVariableDependencies(velocityVariable,[positionVariable,velocityVariable]),gpuCompute.setVariableDependencies(positionVariable,[positionVariable,velocityVariable]),positionUniforms=positionVariable.material.uniforms,velocityUniforms=velocityVariable.material.uniforms,positionUniforms.delta={value:0},positionUniforms.floorPosY={value:62},positionUniforms.isReset={value:!1},positionUniforms.originPosition={value:a},velocityUniforms.delta={value:0},velocityUniforms.floorPosY={value:62},velocityUniforms.forcePos={value:new THREE.Vector3},velocityUniforms.forceRadius={value:forceRadius},velocityUniforms.isReset={value:!1},velocityVariable.wrapS=THREE.RepeatWrapping,velocityVariable.wrapT=THREE.RepeatWrapping,positionVariable.wrapS=THREE.RepeatWrapping,positionVariable.wrapT=THREE.RepeatWrapping,loadingInfo.textContent="Initing Particles 100%",c=gpuCompute.init(),null!==c&&console.error(c),loadingInfo.style.display="none"}function fillPositionTexture(a){var b,c,d,e=a.image.data;for(b=0,c=e.length;c>b;b+=4)d=b/4,e[b+0]=ParticlesInitPosition[d].x,e[b+1]=ParticlesInitPosition[d].y,e[b+2]=ParticlesInitPosition[d].z,e[b+3]=1}function fillVelocityTexture(a){var b,c,d=a.image.data;for(b=0,c=d.length;c>b;b+=4)d[b+0]=0,d[b+1]=0,d[b+2]=0,d[b+3]=1}function getPassThroughFragmentShader(){return"uniform sampler2D texture;\n\nvoid main() {\n\n vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n gl_FragColor = texture2D( texture, uv );\n\n}\n"}var container,stats,camera,scene,raycaster,renderer,forceSphere,gpuCompute,velocityVariable,positionVariable,positionUniforms,velocityUniforms,particleUniforms,mouse=new THREE.Vector2,windowHalfX=window.innerWidth/2,windowHalfY=window.innerHeight/2,isUserInteracting=!1,onMouseDownMouseX=0,onMouseDownMouseY=0,lon=90,onMouseDownLon=0,lat=0,onMouseDownLat=0,phi=0,theta=0,ParticlesInitPosition=[],ParticlesInitNormal=[],last=performance.now(),forceRadius=50,pointSize=3.5,hasLoadObj=!1,WIDTH=512,particleCount=WIDTH*WIDTH,loadingInfo=document.getElementById("loading"),posFShaderText="uniform float delta;uniform float floorPosY;uniform bool isReset;uniform sampler2D originPosition;void main() { vec2 uv = gl_FragCoord.xy / resolution.xy; vec3 position = texture2D( texturePosition, uv ).xyz; vec3 velocity = texture2D( textureVelocity, uv ).xyz; if (isReset) {  vec3 originPos = texture2D( originPosition, uv ).xyz;  float easing = 0.3;  gl_FragColor = vec4(position + (originPos - position)*easing, 1.0); } else {  gl_FragColor = vec4( position + velocity * delta * 20.  , 1.0 );  if (position.y < floorPosY) {   gl_FragColor = vec4(gl_FragColor.x, floorPosY, gl_FragColor.z, 1.0);  } }}",velFShaderText="uniform float delta;uniform float floorPosY;uniform vec3 forcePos;uniform float forceRadius;uniform bool isReset;vec3 g = vec3(0, -8, 0);float rand(vec2 co){ return sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453;}void main() { if (isReset) {  gl_FragColor = vec4( 0.0, 0.0, 0.0 , 1.0 ); } else {  vec2 uv = gl_FragCoord.xy / resolution.xy;  vec3 velocity = texture2D( textureVelocity, uv ).xyz;  vec3 position = texture2D( texturePosition, uv ).xyz;  if (texture2D( textureVelocity, uv ).a == 0.) {   gl_FragColor = vec4( velocity + g*delta, 0.0 );   if (position.y == floorPosY) {    if (length(gl_FragColor.xyz) < 0.5) {     gl_FragColor = vec4(0, 0, 0, 0.0);    } else {     vec3 floorNormal = normalize(vec3(rand(position.xy), abs(rand(position.xz)), rand(position.yz)));     gl_FragColor = vec4(reflect(gl_FragColor.xyz, floorNormal)*0.85, 0.0);    }   }  } else {   gl_FragColor = vec4( velocity , 1.0 );  }   vec3 ForcePos = vec3(forcePos.x, forcePos.y + 110., forcePos.z);  if (length(position - ForcePos) <= forceRadius) {   vec3 dir = normalize(position - ForcePos);   float force = (forceRadius - length(position - ForcePos)) / 15.0;   gl_FragColor = vec4(gl_FragColor.xyz + force*dir, 0.0);  } }}",vertexShaderText="attribute vec2 reference;varying vec3 Normal;varying vec3 FragPos;uniform sampler2D texturePosition;uniform float myPointSize;void main(){ vec3 tmpPos = texture2D( texturePosition, reference ).xyz; vec4 mvPosition = modelViewMatrix * vec4( tmpPos, 1.0 ); gl_Position = projectionMatrix * mvPosition; gl_PointSize = myPointSize; Normal = normal; FragPos = tmpPos;}",fragmentShaderText="varying vec3 Normal;varying vec3 FragPos;vec3 lightPos = vec3(0, 600, 300);vec3 diffuse = vec3(0.3, 0.3 ,0.3);void main(){ vec3 norm = normalize(Normal); vec3 lightDir = normalize(lightPos - FragPos); float diff = max(dot(norm, lightDir), 0.0); diff = diff + 0.2; if (diff > 1.0)  diff = 1.0; diffuse = diff*diffuse; gl_FragColor = vec4(diffuse, 1.0);}";detectDivice(),init(),animate();